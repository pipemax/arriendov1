CREATE OR REPLACE FUNCTION MAYUS_HERRAMIENTA()
RETURNS TRIGGER AS $MAYUS_HERRAMIENTA$
BEGIN
    NEW.NOMBRE := UPPER(NEW.NOMBRE);
    NEW.DESCRIPCION := UPPER(NEW.DESCRIPCION);
    RETURN NEW;
END;
$MAYUS_HERRAMIENTA$ LANGUAGE PLPGSQL;

DROP TRIGGER MAYUS_HERRAMIENTA ON HERRAMIENTA;
CREATE TRIGGER MAYUS_HERRAMIENTA
BEFORE INSERT ON HERRAMIENTA
FOR EACH ROW EXECUTE PROCEDURE MAYUS_HERRAMIENTA();

/************************************************************/

CREATE OR REPLACE FUNCTION MAYUS_USUARIO()
RETURNS TRIGGER AS $MAYUS_USUARIO$
BEGIN
    NEW.NOMBRES := UPPER(NEW.NOMBRES);
    NEW.APELLIDOS := UPPER(NEW.APELLIDOS);
    NEW.CORREO := UPPER(NEW.CORREO);
    NEW.DIRECCION := UPPER(NEW.DIRECCION);
    RETURN NEW;
END;
$MAYUS_USUARIO$ LANGUAGE PLPGSQL;

DROP TRIGGER MAYUS_USUARIO ON USUARIO;
CREATE TRIGGER MAYUS_USUARIO
BEFORE INSERT OR UPDATE ON USUARIO
FOR EACH ROW EXECUTE PROCEDURE MAYUS_USUARIO();


/************************************************************/

drop function descuento_total();
CREATE OR REPLACE FUNCTION DESCUENTO_TOTAL()
RETURNS TRIGGER AS $DESCUENTO_TOTAL$
DECLARE
    VERIFICADOR INT;
BEGIN
    SELECT COUNT(*) INTO VERIFICADOR FROM CARRITO
    WHERE COD_HERRAMIENTA = NEW.COD_HERRAMIENTA AND COD_SUCURSAL = NEW.COD_SUCURSAL AND EMPRESA = NEW.EMPRESA;
    IF VERIFICADOR>0 THEN
        UPDATE CARRITO
        SET DESCUENTO = VERIFICAR_DESCUENTO(COD_HERRAMIENTA,EMPRESA,COD_SUCURSAL)
        WHERE COD_HERRAMIENTA = NEW.COD_HERRAMIENTA AND COD_SUCURSAL = NEW.COD_SUCURSAL AND EMPRESA = NEW.EMPRESA;
    END IF;
    RETURN NEW;
END;
$DESCUENTO_TOTAL$ LANGUAGE PLPGSQL;

DROP TRIGGER DESCUENTO_TOTAL ON SUCURSAL_HERRAMIENTA;
CREATE TRIGGER DESCUENTO_TOTAL
AFTER INSERT OR UPDATE ON SUCURSAL_HERRAMIENTA
FOR EACH ROW EXECUTE PROCEDURE DESCUENTO_TOTAL();

/************************************************************/

CREATE OR REPLACE FUNCTION AJUSTA_TOTAL_CARRITO_INSERT()
RETURNS TRIGGER AS $AJUSTA_TOTAL_CARRITO_INSERT$
DECLARE
    TOTAL_PRODUCTO INT;
    DESCUENTO_PRODUCTO INT;
    TOTAL INT;
BEGIN
    SELECT PRECIO, VERIFICAR_DESCUENTO(COD_HERRAMIENTA,EMPRESA,COD_SUCURSAL) INTO TOTAL_PRODUCTO,DESCUENTO_PRODUCTO FROM SUCURSAL_HERRAMIENTA 
    WHERE COD_HERRAMIENTA = NEW.COD_HERRAMIENTA
    AND COD_SUCURSAL = NEW.COD_SUCURSAL
    AND EMPRESA = NEW.EMPRESA;
    IF DESCUENTO_PRODUCTO IS NULL THEN
        DESCUENTO_PRODUCTO := 0;
    END IF;
    TOTAL := (TOTAL_PRODUCTO*NEW.CANTIDAD);
    NEW.TOTAL := (TOTAL - (TOTAL*DESCUENTO_PRODUCTO)/100);
    NEW.DESCUENTO := DESCUENTO_PRODUCTO;
    RETURN NEW;
END;
$AJUSTA_TOTAL_CARRITO_INSERT$ LANGUAGE PLPGSQL;

DROP TRIGGER AJUSTA_TOTAL_CARRITO_INSERT ON CARRITO;
CREATE TRIGGER AJUSTA_TOTAL_CARRITO_INSERT
BEFORE INSERT ON CARRITO
FOR EACH ROW EXECUTE PROCEDURE AJUSTA_TOTAL_CARRITO_INSERT();

/************************************************************/

CREATE OR REPLACE FUNCTION AJUSTA_TOTAL_CARRITO_UPDATE()
RETURNS TRIGGER AS $AJUSTA_TOTAL_CARRITO_UPDATE$
DECLARE 
    TOTAL_PRODUCTO INT;
    DESCUENTO_PRODUCTO INT;
    TOTAL INT;
BEGIN
    SELECT PRECIO, VERIFICAR_DESCUENTO(COD_HERRAMIENTA,EMPRESA,COD_SUCURSAL) INTO TOTAL_PRODUCTO, DESCUENTO_PRODUCTO FROM SUCURSAL_HERRAMIENTA 
    WHERE COD_HERRAMIENTA = NEW.COD_HERRAMIENTA
    AND COD_SUCURSAL = NEW.COD_SUCURSAL
    AND EMPRESA = NEW.EMPRESA;
    IF DESCUENTO_PRODUCTO IS NULL THEN
        DESCUENTO_PRODUCTO := 0;
    END IF;
    TOTAL := (TOTAL_PRODUCTO*NEW.CANTIDAD);
    NEW.TOTAL := (TOTAL - (TOTAL*DESCUENTO_PRODUCTO)/100);
    NEW.DESCUENTO := DESCUENTO_PRODUCTO;  
    RETURN NEW;
END;
$AJUSTA_TOTAL_CARRITO_UPDATE$ LANGUAGE PLPGSQL;

DROP TRIGGER AJUSTA_TOTAL_CARRITO_UPDATE ON CARRITO;
CREATE TRIGGER AJUSTA_TOTAL_CARRITO_UPDATE
BEFORE UPDATE ON CARRITO
FOR EACH ROW EXECUTE PROCEDURE AJUSTA_TOTAL_CARRITO_UPDATE();

/************************************************************/

CREATE OR REPLACE FUNCTION ACTUALIZA_TOTAL_ARRIENDO()
RETURNS TRIGGER AS $ACTUALIZA_TOTAL_ARRIENDO$
DECLARE
    SUCURSAL INT;
    CANTIDAD_DIAS INT;
BEGIN    
    UPDATE ARRIENDO
    SET TOTAL = TOTAL + NEW.TOTAL_DETALLE
    WHERE COD_ARRIENDO = NEW.ID_A;
    RETURN NEW;
END;
$ACTUALIZA_TOTAL_ARRIENDO$ LANGUAGE PLPGSQL;

DROP TRIGGER ACTUALIZA_TOTAL_ARRIENDO ON DETALLE;
CREATE TRIGGER ACTUALIZA_TOTAL_ARRIENDO
AFTER INSERT ON DETALLE
FOR EACH ROW EXECUTE PROCEDURE ACTUALIZA_TOTAL_ARRIENDO();

/************************************************************/

CREATE OR REPLACE FUNCTION MAYUS_REGION()
RETURNS TRIGGER AS $MAYUS_REGION$
BEGIN
    NEW.REGION_NOMBRE := INITCAP(NEW.REGION_NOMBRE);
    RETURN NEW;
END;
$MAYUS_REGION$ LANGUAGE PLPGSQL;

DROP TRIGGER MAYUS_REGION ON REGION;
CREATE TRIGGER MAYUS_REGION
BEFORE INSERT ON REGION
FOR EACH ROW EXECUTE PROCEDURE MAYUS_REGION();

/************************************************************/

CREATE OR REPLACE FUNCTION MAYUS_PROVINCIA()
RETURNS TRIGGER AS $MAYUS_PROVINCIA$
BEGIN
    NEW.PROVINCIA_NOMBRE := INITCAP(NEW.PROVINCIA_NOMBRE);
    RETURN NEW;
END;
$MAYUS_PROVINCIA$ LANGUAGE PLPGSQL;

DROP TRIGGER MAYUS_PROVINCIA ON PROVINCIA;
CREATE TRIGGER MAYUS_PROVINCIA
BEFORE INSERT ON PROVINCIA
FOR EACH ROW EXECUTE PROCEDURE MAYUS_PROVINCIA();

/************************************************************/

CREATE OR REPLACE FUNCTION MAYUS_COMUNA()
RETURNS TRIGGER AS $MAYUS_COMUNA$
BEGIN
    NEW.COMUNA_NOMBRE := INITCAP(NEW.COMUNA_NOMBRE);
    RETURN NEW;
END;
$MAYUS_COMUNA$ LANGUAGE PLPGSQL;

DROP TRIGGER MAYUS_COMUNA ON COMUNA;
CREATE TRIGGER MAYUS_COMUNA
BEFORE INSERT ON COMUNA
FOR EACH ROW EXECUTE PROCEDURE MAYUS_COMUNA();

/************************************************************/

CREATE OR REPLACE FUNCTION MAYUS_SUCURSAL()
RETURNS TRIGGER AS $MAYUS_SUCURSAL$
BEGIN
    NEW.NOMBRE := UPPER(NEW.NOMBRE);
    NEW.DIRECCION := UPPER(NEW.DIRECCION);
    RETURN NEW;
END;
$MAYUS_SUCURSAL$ LANGUAGE PLPGSQL;

DROP TRIGGER MAYUS_SUCURSAL ON SUCURSAL;
CREATE TRIGGER MAYUS_SUCURSAL
BEFORE INSERT ON SUCURSAL
FOR EACH ROW EXECUTE PROCEDURE MAYUS_SUCURSAL();

/************************************************************/

CREATE OR REPLACE FUNCTION MODIFICAR_DETALLE_T()
RETURNS TRIGGER AS $MODIFICAR_DETALLE_T$
DECLARE
    ITEMS_DETALLE CURSOR FOR SELECT ESTADO FROM DETALLE 
    WHERE ID_A = NEW.ID_A;
    CONTADOR INT := 0;
    CONTADOR_PENDIENTE INT := 0;
    CONTADOR_ENTREGADO INT := 0;
    CONTADOR_ANULADO INT := 0;
    CONTADOR_COMPLETADO INT := 0;
BEGIN
    SELECT COUNT(*) INTO CONTADOR FROM DETALLE WHERE ID_A = NEW.ID_A;
    IF OLD.ESTADO<>NEW.ESTADO AND OLD.ESTADO = 'PENDIENTE' AND NEW.ESTADO = 'ANULADO' THEN
        UPDATE ARRIENDO
        SET TOTAL = TOTAL - NEW.TOTAL_DETALLE
        WHERE COD_ARRIENDO = NEW.ID_A;
    ELSIF OLD.ESTADO<>NEW.ESTADO AND OLD.ESTADO = 'ANULADO' THEN
        UPDATE ARRIENDO
        SET TOTAL = TOTAL + NEW.TOTAL_DETALLE
        WHERE COD_ARRIENDO = NEW.ID_A;
    END IF;
    FOR REGISTRO IN ITEMS_DETALLE LOOP  
        IF REGISTRO.ESTADO = 'PENDIENTE' THEN
            CONTADOR_PENDIENTE := CONTADOR_PENDIENTE + 1;            
        ELSIF REGISTRO.ESTADO = 'ENTREGADO' THEN
            CONTADOR_ENTREGADO := CONTADOR_ENTREGADO + 1;
        ELSIF REGISTRO.ESTADO = 'ANULADO' THEN
            CONTADOR_ANULADO := CONTADOR_ANULADO + 1;
        ELSIF REGISTRO.ESTADO = 'COMPLETADO' THEN
            CONTADOR_COMPLETADO := CONTADOR_COMPLETADO + 1;
        END IF;         
    END LOOP;
    IF CONTADOR_PENDIENTE = 1 THEN
        UPDATE ARRIENDO
        SET ESTADO = 'PENDIENTE'
        WHERE COD_ARRIENDO = NEW.ID_A;
    ELSIF CONTADOR_ENTREGADO = CONTADOR THEN
        UPDATE ARRIENDO
        SET ESTADO = 'ENTREGADO'
        WHERE COD_ARRIENDO = NEW.ID_A;
    ELSIF CONTADOR_ANULADO = CONTADOR THEN
        UPDATE ARRIENDO
        SET ESTADO = 'ANULADO'
        WHERE COD_ARRIENDO = NEW.ID_A;
    ELSIF CONTADOR_COMPLETADO = CONTADOR OR (CONTADOR_COMPLETADO + CONTADOR_ANULADO) = CONTADOR THEN
        UPDATE ARRIENDO
        SET ESTADO = 'COMPLETADO'
        WHERE COD_ARRIENDO = NEW.ID_A;
    END IF;
    RETURN NEW;
END;
$MODIFICAR_DETALLE_T$ LANGUAGE PLPGSQL;

DROP TRIGGER MODIFICAR_DETALLE_T ON DETALLE ;
CREATE TRIGGER MODIFICAR_DETALLE_T
AFTER UPDATE ON DETALLE
FOR EACH ROW EXECUTE PROCEDURE MODIFICAR_DETALLE_T();