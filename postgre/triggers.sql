CREATE OR REPLACE FUNCTION MAYUS_HERRAMIENTA()
RETURNS TRIGGER AS $MAYUS_HERRAMIENTA$
BEGIN
    NEW.NOMBRE := UPPER(NEW.NOMBRE);
    NEW.DESCRIPCION := UPPER(NEW.DESCRIPCION);
    RETURN NEW;
END;
$MAYUS_HERRAMIENTA$ LANGUAGE PLPGSQL;

DROP TRIGGER MAYUS_HERRAMIENTA ON HERRAMIENTA;
CREATE TRIGGER MAYUS_HERRAMIENTA
BEFORE INSERT ON HERRAMIENTA
FOR EACH ROW EXECUTE PROCEDURE MAYUS_HERRAMIENTA();

/************************************************************/

CREATE OR REPLACE FUNCTION MAYUS_USUARIO()
RETURNS TRIGGER AS $MAYUS_USUARIO$
BEGIN
    NEW.NOMBRES := UPPER(NEW.NOMBRES);
    NEW.APELLIDOS := UPPER(NEW.APELLIDOS);
    NEW.CORREO := UPPER(NEW.CORREO);
    NEW.DIRECCION := UPPER(NEW.DIRECCION);
    RETURN NEW;
END;
$MAYUS_USUARIO$ LANGUAGE PLPGSQL;

DROP TRIGGER MAYUS_USUARIO ON USUARIO;
CREATE TRIGGER MAYUS_USUARIO
BEFORE INSERT ON USUARIO
FOR EACH ROW EXECUTE PROCEDURE MAYUS_USUARIO();

/************************************************************/

CREATE OR REPLACE FUNCTION AJUSTA_TOTAL_CARRITO_INSERT()
RETURNS TRIGGER AS $AJUSTA_TOTAL_CARRITO_INSERT$
DECLARE
    TOTAL_PRODUCTO INT;
BEGIN
    SELECT PRECIO INTO TOTAL_PRODUCTO FROM SUCURSAL_HERRAMIENTA 
    WHERE COD_HERRAMIENTA = NEW.COD_HERRAMIENTA
    AND COD_SUCURSAL = NEW.COD_SUCURSAL;
    NEW.TOTAL := (TOTAL_PRODUCTO*NEW.CANTIDAD);
    RETURN NEW;
END;
$AJUSTA_TOTAL_CARRITO_INSERT$ LANGUAGE PLPGSQL;

DROP TRIGGER AJUSTA_TOTAL_CARRITO_INSERT ON CARRITO;
CREATE TRIGGER AJUSTA_TOTAL_CARRITO_INSERT
BEFORE INSERT ON CARRITO
FOR EACH ROW EXECUTE PROCEDURE AJUSTA_TOTAL_CARRITO_INSERT();

/************************************************************/

CREATE OR REPLACE FUNCTION AJUSTA_TOTAL_CARRITO_UPDATE()
RETURNS TRIGGER AS $AJUSTA_TOTAL_CARRITO_UPDATE$
DECLARE 
    TOTAL_PRODUCTO INT;
BEGIN
    SELECT PRECIO INTO TOTAL_PRODUCTO FROM SUCURSAL_HERRAMIENTA 
    WHERE COD_HERRAMIENTA = NEW.COD_HERRAMIENTA
    AND COD_SUCURSAL = NEW.COD_SUCURSAL;
    NEW.TOTAL := NEW.CANTIDAD*TOTAL_PRODUCTO;
    RETURN NEW;
END;
$AJUSTA_TOTAL_CARRITO_UPDATE$ LANGUAGE PLPGSQL;

DROP TRIGGER AJUSTA_TOTAL_CARRITO_UPDATE ON CARRITO;
CREATE TRIGGER AJUSTA_TOTAL_CARRITO_UPDATE
BEFORE UPDATE ON CARRITO
FOR EACH ROW EXECUTE PROCEDURE AJUSTA_TOTAL_CARRITO_UPDATE();

/************************************************************/

CREATE OR REPLACE FUNCTION ACTUALIZA_TOTAL_ARRIENDO()
RETURNS TRIGGER AS $ACTUALIZA_TOTAL_ARRIENDO$
DECLARE
    SUCURSAL INT;
    CANTIDAD_DIAS INT;
BEGIN    
    UPDATE ARRIENDO
    SET TOTAL = TOTAL + NEW.TOTAL_DETALLE
    WHERE COD_ARRIENDO = NEW.ID_A;
    RETURN NEW;
END;
$ACTUALIZA_TOTAL_ARRIENDO$ LANGUAGE PLPGSQL;

DROP TRIGGER ACTUALIZA_TOTAL_ARRIENDO ON DETALLE;
CREATE TRIGGER ACTUALIZA_TOTAL_ARRIENDO
AFTER INSERT ON DETALLE
FOR EACH ROW EXECUTE PROCEDURE ACTUALIZA_TOTAL_ARRIENDO();

/************************************************************/

CREATE OR REPLACE FUNCTION MAYUS_REGION()
RETURNS TRIGGER AS $MAYUS_REGION$
BEGIN
    NEW.REGION_NOMBRE := INITCAP(NEW.REGION_NOMBRE);
    RETURN NEW;
END;
$MAYUS_REGION$ LANGUAGE PLPGSQL;

DROP TRIGGER MAYUS_REGION ON REGION;
CREATE TRIGGER MAYUS_REGION
BEFORE INSERT ON REGION
FOR EACH ROW EXECUTE PROCEDURE MAYUS_REGION();

/************************************************************/

CREATE OR REPLACE FUNCTION MAYUS_PROVINCIA()
RETURNS TRIGGER AS $MAYUS_PROVINCIA$
BEGIN
    NEW.PROVINCIA_NOMBRE := INITCAP(NEW.PROVINCIA_NOMBRE);
    RETURN NEW;
END;
$MAYUS_PROVINCIA$ LANGUAGE PLPGSQL;

DROP TRIGGER MAYUS_PROVINCIA ON PROVINCIA;
CREATE TRIGGER MAYUS_PROVINCIA
BEFORE INSERT ON PROVINCIA
FOR EACH ROW EXECUTE PROCEDURE MAYUS_PROVINCIA();

/************************************************************/

CREATE OR REPLACE FUNCTION MAYUS_COMUNA()
RETURNS TRIGGER AS $MAYUS_COMUNA$
BEGIN
    NEW.COMUNA_NOMBRE := INITCAP(NEW.COMUNA_NOMBRE);
    RETURN NEW;
END;
$MAYUS_COMUNA$ LANGUAGE PLPGSQL;

DROP TRIGGER MAYUS_COMUNA ON COMUNA;
CREATE TRIGGER MAYUS_COMUNA
BEFORE INSERT ON COMUNA
FOR EACH ROW EXECUTE PROCEDURE MAYUS_COMUNA();

/************************************************************/