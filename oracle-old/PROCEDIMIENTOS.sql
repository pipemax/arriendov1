--PROCEDIMIENTOS DEL SISTEMA

CREATE OR REPLACE PROCEDURE INSERTAR_USUARIO(
    RUT_U IN USUARIO.RUT%TYPE,
    NOMBRES_U IN USUARIO.NOMBRES%TYPE,
    APELLIDOS_U IN USUARIO.APELLIDOS%TYPE,
    CORREO_U IN USUARIO.CORREO%TYPE,
    PASS_U IN USUARIO.PASS%TYPE,
    DIRECCION_U IN USUARIO.DIRECCION%TYPE,
    CELULAR_U IN USUARIO.CELULAR%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
    L_SAL VARCHAR2(30) := 'CONSTRUOK-PIPEMAX-1994';
    RUTINVALIDO EXCEPTION;
    EXISTE EXCEPTION;
BEGIN
    IF(VALIDACION(RUT_U)=TRUE) THEN
        IF(CHECKUSER(RUT_U)=TRUE) THEN
            RAISE EXISTE;
        ELSE
            LOCK TABLE USUARIO IN ROW EXCLUSIVE MODE;
            INSERT INTO USUARIO VALUES(RUT_U,NOMBRES_U,APELLIDOS_U,CORREO_U,'CLIENTE',DBMS_CRYPTO.HASH(UTL_RAW.CAST_TO_RAW(L_SAL || UPPER(PASS_U)),DBMS_CRYPTO.HASH_SH1),0,DIRECCION_U,CELULAR_U);
            COMMIT;
            BOOL := 'TRUE';
            MESSAGE := 'EL USUARIO SE HA INGRESADO EXITOSAMENTE';
        END IF;
    ELSE
        RAISE RUTINVALIDO;
    END IF;
    EXCEPTION           
        WHEN VALUE_ERROR THEN
            BOOL := 'FALSE';
            MESSAGE := 'HA OCURRIDO UN ERROR DE CONVERSION A NIVEL DE BASE DE DATOS';
            ROLLBACK;
        WHEN DUP_VAL_ON_INDEX THEN
            BOOL := 'FALSE';
            MESSAGE := 'EL USUARIO CON RUT: '||RUT_U||' QUE INTENTA INGRESAR YA EXISTE';
            ROLLBACK;
        WHEN RUTINVALIDO THEN
            BOOL := 'FALSE';
            MESSAGE := 'EL RUT: '||RUT_U||' NO ES UN RUT VÁLIDO';
            ROLLBACK;            
        WHEN EXISTE THEN
            BOOL := 'FALSE';
            MESSAGE := 'EL USUARIO CON RUT: '||RUT_U||' QUE INTENTA INGRESAR YA EXISTE';
            ROLLBACK;
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END INSERTAR_USUARIO;

CREATE OR REPLACE PROCEDURE ELIMINAR_USUARIO(
    RUT_U IN USUARIO.RUT%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
    NOEXISTE EXCEPTION;
    NOMBRE_USER VARCHAR2(100);
BEGIN
    IF(CHECKUSER(RUT_U)=TRUE) THEN
        SELECT CONCAT(CONCAT(NOMBRES,' '),APELLIDOS) INTO NOMBRE_USER FROM USUARIO WHERE RUT = RUT_U;
        LOCK TABLE USUARIO IN ROW EXCLUSIVE MODE;
        DELETE FROM USUARIO WHERE RUT=RUT_U;
        COMMIT;
        BOOL := 'TRUE';
        MESSAGE := 'EL USUARIO: '||NOMBRE_USER||' FUE ELIMINADO EXITOSAMENTE';
    ELSE
        RAISE NOEXISTE;
    END IF;
    EXCEPTION
        WHEN NOEXISTE THEN
            BOOL := 'FALSE';
            MESSAGE := 'EL USUARIO: '||NOMBRE_USER||' NO EXISTE';
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END ELIMINAR_USUARIO;

CREATE OR REPLACE PROCEDURE ACTUALIZAR_USER(
    RUT_A IN USUARIO.RUT%TYPE,
    NOMBRES_A IN USUARIO.NOMBRES%TYPE,
    APELLIDOS_A IN USUARIO.APELLIDOS%TYPE,
    CORREO_A IN USUARIO.CORREO%TYPE,
    DIRECCION_U IN USUARIO.DIRECCION%TYPE,
    CELULAR_U IN USUARIO.CELULAR%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
    NOMBRE_USER VARCHAR2(100);
BEGIN
    IF(CHECKUSER(RUT_A)=TRUE) THEN
        SELECT CONCAT(CONCAT(NOMBRES,' '),APELLIDOS) INTO NOMBRE_USER FROM USUARIO WHERE RUT = RUT_A;
        LOCK TABLE USUARIO IN ROW EXCLUSIVE MODE;
        UPDATE USUARIO
        SET NOMBRES=NOMBRES_A,APELLIDOS=APELLIDOS_A,CORREO=CORREO_A,DIRECCION=DIRECCION_U,CELULAR=CELULAR_U
        WHERE RUT=RUT_A;
        COMMIT;
        BOOL := 'TRUE';
        MESSAGE := 'EL USUARIO: '||NOMBRE_USER||' HA SIDO MODIFICADO EXITOSAMENTE';
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'EL USUARIO: '||NOMBRE_USER||' QUE INTENTA MODIFICAR NO EXISTE.';
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END ACTUALIZAR_USER;

CREATE OR REPLACE PROCEDURE ACTUALIZAR_PASSWORD_USER(
    RUT_U IN USUARIO.RUT%TYPE,
    PASS_U IN USUARIO.PASS%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
    NOMBRE_USER VARCHAR2(100);
    L_SAL VARCHAR2(30) := 'CONSTRUOK-PIPEMAX-1994';
BEGIN
    IF (CHECKUSER(RUT_U)=TRUE)  THEN
        SELECT CONCAT(CONCAT(NOMBRES,' '),APELLIDOS) INTO NOMBRE_USER FROM USUARIO WHERE RUT = RUT_U;
        LOCK TABLE USUARIO IN ROW EXCLUSIVE MODE;
        UPDATE USUARIO
        SET PASS = DBMS_CRYPTO.HASH(UTL_RAW.CAST_TO_RAW(L_SAL || UPPER(PASS_U)),DBMS_CRYPTO.HASH_SH1)
        WHERE RUT=RUT_U;
        COMMIT;
        BOOL := 'TRUE';
        MESSAGE := 'LA CONTRASEÑA DEL USUARIO: '||NOMBRE_USER||' SE HA MODIFICADO EXITOSAMENTE';
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'LA CONTRASEÑA NO SE PUDO MODIFICAR YA QUE EL USUARIO '||NOMBRE_USER||' NO EXISTE';
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END ACTUALIZAR_PASSWORD_USER;

CREATE OR REPLACE PROCEDURE NUEVA_HERRAMIENTA(
    CODIGO IN HERRAMIENTA.COD_HERRAMIENTA%TYPE,
    NOMBRE_H IN HERRAMIENTA.NOMBRE%TYPE,
    DESCRIPCION_H IN HERRAMIENTA.DESCRIPCION%TYPE,
    URL_FOTO_H IN HERRAMIENTA.URL_FOTO%TYPE,
    CATEGORIA_ID_H IN HERRAMIENTA.COD_CATEGORIA%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2
)
IS
BEGIN
    IF CHECKHERRAMIENTA(CODIGO)=FALSE THEN
        LOCK TABLE HERRAMIENTA IN ROW EXCLUSIVE MODE;
        INSERT INTO HERRAMIENTA VALUES(CODIGO,NOMBRE_H,DESCRIPCION_H,URL_FOTO_H,CATEGORIA_ID_H);
        COMMIT;
        BOOL := 'TRUE';
        MESSAGE := 'SE HA REGISTRADO UNA NUEVA HERRAMIENTA CON CÓDIGO: '||CODIGO;
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'LA HERRAMIENTA QUE INTENTA REGISTRAR YA EXISTE, MODIFIQUE EL STOCK EN LA HERRAMIENTA CÓDIGO: '||CODIGO;
    END IF;
    EXCEPTION
        WHEN VALUE_ERROR THEN
            BOOL := 'FALSE';
            MESSAGE := 'HA OCURRIDO UN ERROR DE CONVERSIÓN A NIVEL DE BASE DE DATOS';
            ROLLBACK;
        WHEN DUP_VAL_ON_INDEX THEN
            BOOL := 'FALSE';
            MESSAGE := 'LA HERRAMIENTA CON CÓDIGO: '||CODIGO||' YA EXISTE EN LA BASE DE DATOS';
            ROLLBACK;
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END NUEVA_HERRAMIENTA;

CREATE OR REPLACE PROCEDURE VINCULAR_HERRAMIENTA_SUCURSAL(
    CODIGO IN SUCURSAL_HERRAMIENTA.COD_HERRAMIENTA%TYPE, -- codigo herramienta
    CODIGO_S IN SUCURSAL_HERRAMIENTA.COD_SUCURSAL%TYPE,  -- codigo sucursal
    PRECIO_H IN SUCURSAL_HERRAMIENTA.PRECIO%TYPE,        -- precio herramienta
    STOCK_H IN SUCURSAL_HERRAMIENTA.STOCK%TYPE,          -- stock herramienta
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
    NOMBRE_S VARCHAR2(100);
    NOMBRE_H VARCHAR2(100);
BEGIN
    IF (CHECKHERRAMIENTA(CODIGO)=TRUE AND CHECKSUCURSAL(CODIGO_S)=TRUE) THEN
        SELECT NOMBRE INTO NOMBRE_S FROM SUCURSAL WHERE COD_SUCURSAL = CODIGO_S;
        SELECT NOMBRE INTO NOMBRE_H FROM HERRAMIENTA WHERE COD_HERRAMIENTA = CODIGO;
        IF(VERIFICA_HERRAMIENTA_SUCURSAL(CODIGO,CODIGO_S)=FALSE) THEN
            LOCK TABLE SUCURSAL_HERRAMIENTA IN ROW EXCLUSIVE MODE;
            INSERT INTO SUCURSAL_HERRAMIENTA VALUES (CODIGO,CODIGO_S,STOCK_H,PRECIO_H);
            COMMIT;
            BOOL := 'TRUE';
            MESSAGE := 'LA VINCULACIÓN DE LA HERRAMIENTA: "'||NOMBRE_H||'" CON LA SUCURSAL:  "'||NOMBRE_S||'" SE REALIZÓ CORRECTAMENTE';
        ELSE
            BOOL := 'FALSE';
            MESSAGE := 'YA EXISTE ESTA HERRAMIENTA VINCULADA A ESTA SUCURSAL, MODIFIQUE STOCK O PRECIO';
        END IF;            
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'EL CÓDIGO DE HERRAMIENTA O LA SUCURSAL SELECCIONADA NO EXISTE EN LA BASE DE DATOS';
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE DESVINCULAR_H_SUCURSAL(
    CODIGO IN SUCURSAL_HERRAMIENTA.COD_HERRAMIENTA%TYPE,
    CODIGO_S IN SUCURSAL_HERRAMIENTA.COD_SUCURSAL%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
    NOMBRE_S VARCHAR2(100);
    NOMBRE_H VARCHAR2(100);
BEGIN
    IF (CHECKHERRAMIENTA(CODIGO)=TRUE AND CHECKSUCURSAL(CODIGO_S)=TRUE) THEN
        SELECT NOMBRE INTO NOMBRE_S FROM SUCURSAL WHERE COD_SUCURSAL = CODIGO_S;
        SELECT NOMBRE INTO NOMBRE_H FROM HERRAMIENTA WHERE COD_HERRAMIENTA = CODIGO;
        IF(VERIFICA_HERRAMIENTA_SUCURSAL(CODIGO,CODIGO_S)=TRUE) THEN
            LOCK TABLE SUCURSAL_HERRAMIENTA IN ROW EXCLUSIVE MODE;
            DELETE FROM SUCURSAL_HERRAMIENTA WHERE COD_HERRAMIENTA = CODIGO AND COD_SUCURSAL = CODIGO_S;
            COMMIT;
            BOOL := 'TRUE';
            MESSAGE := 'LA HERRAMIENTA: "'||NOMBRE_H||'" SE HA DESVINCULADO DE LA SUCURSAL: "'||NOMBRE_S||'"';
        END IF;            
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'EL CÓDIGO DE HERRAMIENTA O LA SUCURSAL SELECCIONADA NO EXISTE.';
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE ACTUALIZAR_H_SUCURSAL(
    CODIGO IN SUCURSAL_HERRAMIENTA.COD_HERRAMIENTA%TYPE,
    CODIGO_S IN SUCURSAL_HERRAMIENTA.COD_SUCURSAL%TYPE,
    STOCK_H IN SUCURSAL_HERRAMIENTA.STOCK%TYPE,
    PRECIO_H IN SUCURSAL_HERRAMIENTA.PRECIO%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
    NOMBRE_H VARCHAR2(100);
    NOMBRE_S VARCHAR2(100);
BEGIN
    IF(CHECKHERRAMIENTA(CODIGO)=TRUE AND CHECKSUCURSAL(CODIGO_S)=TRUE) THEN
        SELECT NOMBRE INTO NOMBRE_H FROM HERRAMIENTA WHERE COD_HERRAMIENTA = CODIGO;
        SELECT NOMBRE INTO NOMBRE_S FROM SUCURSAL WHERE COD_SUCURSAL = CODIGO_S;
        LOCK TABLE SUCURSAL_HERRAMIENTA IN ROW EXCLUSIVE MODE;
        UPDATE SUCURSAL_HERRAMIENTA 
        SET STOCK = STOCK_H, PRECIO = PRECIO_H
        WHERE COD_HERRAMIENTA = CODIGO AND COD_SUCURSAL = CODIGO_S;
        COMMIT;
        BOOL := 'TRUE';
        MESSAGE := 'SE HA ACTUALIZADO EL STOCK Y/O PRECIOS DE LA HERRAMIENTA "'||NOMBRE_H||'" EN LA SUCURSAL "'||NOMBRE_S||'"';
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'LA HERRAMIENTA O SUCURSAL SELECCIONADA NO EXISTEN.';
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE AUMENTAR_STOCK(
    CODIGO IN SUCURSAL_HERRAMIENTA.COD_HERRAMIENTA%TYPE,
    CANTIDAD IN NUMBER,
    CODIGO_S IN NUMBER,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
BEGIN
    IF CHECKHERRAMIENTA(CODIGO)=TRUE THEN
        LOCK TABLE SUCURSAL_HERRAMIENTA IN ROW EXCLUSIVE MODE;
        UPDATE SUCURSAL_HERRAMIENTA 
        SET STOCK = (STOCK + CANTIDAD)
        WHERE COD_HERRAMIENTA=CODIGO AND COD_SUCURSAL=CODIGO_S;
        COMMIT;
        BOOL := 'TRUE';
        MESSAGE := 'SE HA INCREMENTADO EL STOCK DE LA HERRAMIENTA CÓDIGO: '||CODIGO||' EN '||CANTIDAD||' UNIDADES';
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'NO SE PUEDE AUMENTAR EL STOCK EN LA HERRAMIENTA CÓDIGO: '||CODIGO||' YA QUE NO EXISTE EN LA BASE DE DATOS';
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END AUMENTAR_STOCK;

CREATE OR REPLACE PROCEDURE QUITAR_STOCK(
    CODIGO IN SUCURSAL_HERRAMIENTA.COD_HERRAMIENTA%TYPE,
    CANTIDAD IN NUMBER,
    CODIGO_S IN NUMBER,
    FECHA_I IN VARCHAR2,
    FECHA_F IN VARCHAR2,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
    STOCK_ACTUAL NUMBER;
BEGIN
    IF(CHECKHERRAMIENTA(CODIGO)=TRUE) THEN
        STOCK_ACTUAL := CHECKSTOCK(CODIGO,CODIGO_S,FECHA_I,FECHA_F);        
        IF(STOCK_ACTUAL-CANTIDAD>=0 AND CANTIDAD>0) THEN
            LOCK TABLE SUCURSAL_HERRAMIENTA IN ROW EXCLUSIVE MODE;
            UPDATE SUCURSAL_HERRAMIENTA
            SET STOCK = (STOCK-CANTIDAD)
            WHERE COD_HERRAMIENTA = CODIGO AND COD_SUCURSAL = CODIGO_S;
            COMMIT;
            BOOL := 'TRUE';
            MESSAGE := 'SE HA DECREMENTADO EL STOCK DE LA HERRAMIENTA CÓDIGO: '||CODIGO||' EN '||CANTIDAD||' UNIDADES';
        ELSE
            IF(CANTIDAD=0 OR CANTIDAD<0) THEN
                BOOL := 'FALSE';
                MESSAGE := 'DEBE INGRESAR UNA CANTIDAD MAYOR A CERO';
            ELSE
                BOOL := 'FALSE';
                MESSAGE := 'NO SE PUEDE DECREMENTAR EL STOCK EN '||CANTIDAD|| ' YA QUE EL SERÍA STOCK NEGATIVO';
            END IF;
        END IF;
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'NO SE PUEDE AUMENTAR EL STOCK EN LA HERRAMIENTA CÓDIGO: '||CODIGO||' YA QUE NO EXISTE EN LA BASE DE DATOS';
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END QUITAR_STOCK;

CREATE OR REPLACE PROCEDURE ELIMINAR_HERRAMIENTA(
    CODIGO IN HERRAMIENTA.COD_HERRAMIENTA%TYPE,    
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
BEGIN
    IF(CHECKHERRAMIENTA(CODIGO)=TRUE) THEN
        LOCK TABLE HERRAMIENTA IN ROW EXCLUSIVE MODE;
        DELETE FROM HERRAMIENTA WHERE COD_HERRAMIENTA=CODIGO;
        COMMIT;
        BOOL := 'TRUE';
        MESSAGE := 'LA HERRAMIENTA CÓDIGO: '||CODIGO||' HA SIDO ELIMINADA CON ÉXTIO';
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'LA HERRAMIENTA QUE INTENTA ELIMINAR NO EXISTE';
    END IF;
    EXCEPTION
    WHEN OTHERS THEN
        BOOL := 'FALSE';
        MESSAGE := SQLERRM;
        ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE ACTUALIZAR_HERRAMIENTA(
    CODIGO IN HERRAMIENTA.COD_HERRAMIENTA%TYPE,
    NOMBRE_H IN HERRAMIENTA.NOMBRE%TYPE,
    DESCRIPCION_H IN HERRAMIENTA.DESCRIPCION%TYPE,
    URL_FOTO_H IN HERRAMIENTA.URL_FOTO%TYPE,
    CATEGORIA_H IN HERRAMIENTA.COD_CATEGORIA%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS 
    NOMBRE_HH VARCHAR2(100);
BEGIN
    IF(CHECKHERRAMIENTA(CODIGO)=TRUE) THEN
        SELECT NOMBRE INTO NOMBRE_HH FROM HERRAMIENTA WHERE COD_HERRAMIENTA = CODIGO;
        LOCK TABLE HERRAMIENTA IN ROW EXCLUSIVE MODE;
        UPDATE HERRAMIENTA
        SET NOMBRE=NOMBRE_H,DESCRIPCION=DESCRIPCION_H,URL_FOTO=URL_FOTO_H,COD_CATEGORIA=CATEGORIA_H
        WHERE COD_HERRAMIENTA=CODIGO;
        COMMIT;
        BOOL := 'TRUE';
        MESSAGE := 'SE HA ACTUALIZADO EXITOSAMENTE LA HERRAMIENTA CÓDIGO: '||NOMBRE_HH;
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'NO SE PUEDE ACTUALIZAR LA HERRAMIENTA YA QUE NO EXISTE EN LA BASE DE DATOS';
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END ACTUALIZAR_HERRAMIENTA;

CREATE OR REPLACE PROCEDURE NUEVA_SUCURSAL(
    NOMBRE_S IN SUCURSAL.NOMBRE%TYPE,
    DIRECCION_S IN SUCURSAL.DIRECCION%TYPE,
    TELEFONO_S IN SUCURSAL.TELEFONO%TYPE,
    URL_FOTO_S IN SUCURSAL.URL_FOTO%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS 
BEGIN
    LOCK TABLE SUCURSAL IN ROW EXCLUSIVE MODE;
    INSERT INTO SUCURSAL(NOMBRE,DIRECCION,TELEFONO,URL_FOTO) VALUES (NOMBRE_S,DIRECCION_S,TELEFONO_S,URL_FOTO_S);
    COMMIT;
    BOOL := 'TRUE';
    MESSAGE := 'LA SUCURSAL SE HA INGRESADO EXITOSAMENTE';
    EXCEPTION
        WHEN DUP_VAL_ON_INDEX THEN
            BOOL := 'FALSE';
            MESSAGE := 'LA SUCURSAL QUE INTENTA INGRESAR YA SE ENCUENTRA REGISTRADA';
            ROLLBACK;
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END NUEVA_SUCURSAL;

CREATE OR REPLACE PROCEDURE ELIMINAR_SUCURSAL(
    CODIGO IN SUCURSAL.COD_SUCURSAL%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
    NOMBRE_SUCURSAL VARCHAR2(100);
BEGIN
    IF(CHECKSUCURSAL(CODIGO)=TRUE) THEN
        SELECT NOMBRE INTO NOMBRE_SUCURSAL FROM SUCURSAL WHERE COD_SUCURSAL = CODIGO;
        LOCK TABLE SUCURSAL IN ROW EXCLUSIVE MODE;
        DELETE FROM SUCURSAL WHERE COD_SUCURSAL=CODIGO;
        COMMIT;
        BOOL := 'TRUE';
        MESSAGE := 'LA SUCURSAL: '||NOMBRE_SUCURSAL||' HA SIDO ELIMINADA SATISFACTORIAMENTE';
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'LA SUCURSAL QUE INTENTA ELIMINAR NO EXISTE EN LA BASE DE DATOS';
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            BOOL:='FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END ELIMINAR_SUCURSAL; 

CREATE OR REPLACE PROCEDURE ACTUALIZAR_SUCURSAL(
    CODIGO IN SUCURSAL.COD_SUCURSAL%TYPE,
    NOMBRE_S IN SUCURSAL.NOMBRE%TYPE,
    DIRECCION_S IN SUCURSAL.DIRECCION%TYPE,
    TELEFONO_S IN SUCURSAL.TELEFONO%TYPE,
    URL_FOTO_S IN SUCURSAL.URL_FOTO%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
    NOMBRE_SUCURSAL VARCHAR2(100);
BEGIN
    IF(CHECKSUCURSAL(CODIGO)=TRUE) THEN
        SELECT NOMBRE INTO NOMBRE_SUCURSAL FROM SUCURSAL WHERE COD_SUCURSAL = CODIGO;
        LOCK TABLE SUCURSAL IN ROW EXCLUSIVE MODE;
        UPDATE SUCURSAL
        SET NOMBRE=NOMBRE_S,DIRECCION=DIRECCION_S,TELEFONO=TELEFONO_S,URL_FOTO=URL_FOTO_S
        WHERE COD_SUCURSAL=CODIGO;
        COMMIT;
        BOOL := 'TRUE';
        MESSAGE := 'LA ACTUALIZACIÓN DE LA SUCURSAL: '||NOMBRE_SUCURSAL||' SE HA REALIZADO CON ÉXITO';
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'NO SE PUDO ACTUALIZAR LA SUCURSAL YA QUE NO EXISTE EN LA BASE DE DATOS';
    END IF;
    EXCEPTION
        WHEN OTHERS THEN    
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END ACTUALIZAR_SUCURSAL;

CREATE OR REPLACE PROCEDURE VERIFICARUT(
    RUT_U IN USUARIO.RUT%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS 
BEGIN
    IF(CHECKUSER(RUT_U)=TRUE) THEN
        BOOL := 'TRUE';
        MESSAGE := 'USUARIO VERIFICADO';
    ELSE
        BOOL:='FALSE';
        MESSAGE := 'USUARIO NO ENCONTRADO';
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            BOOL := 'ERROR';
            MESSAGE := SQLERRM;
END;

CREATE OR REPLACE PROCEDURE OBTENERPASS(
    RUT_U IN USUARIO.RUT%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS 
    PASS_U VARCHAR2(100);
BEGIN
    PASS_U := GETPASS(RUT_U);
    IF(PASS_U!='FALSE') THEN
        BOOL := 'TRUE';
        MESSAGE := PASS_U;
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'EL USUARIO NO EXISTE';
    END IF;
    EXCEPTION
    WHEN INVALID_NUMBER THEN
        BOOL := 'FALSE';
        MESSAGE := 'EL VALOR DEL RUT DEBE SER NUMÉRICO';
    WHEN OTHERS THEN
        BOOL := 'FALSE';
        MESSAGE := SQLERRM;
END;

CREATE OR REPLACE PROCEDURE NUEVA_CATEGORIA(
    NOMBRE_C IN CATEGORIA.NOMBRE%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
BEGIN
    LOCK TABLE CATEGORIA IN ROW EXCLUSIVE MODE;
    INSERT INTO CATEGORIA(NOMBRE) VALUES (NOMBRE_C);
    COMMIT;
    BOOL := 'TRUE';
    MESSAGE := 'LA NUEVA CATEGORIA SE HA CREADO EXITOSAMENTE';
    EXCEPTION
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END NUEVA_CATEGORIA;

CREATE OR REPLACE PROCEDURE ELIMINAR_CATEGORIA(
    CODIGO IN CATEGORIA.COD_CATEGORIA%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
BEGIN 
    IF(CHECKCATEGORIA(CODIGO)=TRUE) THEN
        LOCK TABLE CATEGORIA IN ROW EXCLUSIVE MODE;
        DELETE FROM CATEGORIA WHERE COD_CATEGORIA=CODIGO;
        COMMIT;
        BOOL := 'TRUE';
        MESSAGE := 'SE HA ELIMINADO LA CATEGORIA EXITOSAMENTE';
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'LA CATEGORIA QUE INTENTA ELIMINAR NO EXISTE';
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END ELIMINAR_CATEGORIA;

CREATE OR REPLACE PROCEDURE ACTUALIZAR_CATEGORIA(
    CODIGO IN CATEGORIA.COD_CATEGORIA%TYPE,
    NOMBRE_C IN CATEGORIA.NOMBRE%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
BEGIN
    IF(CHECKCATEGORIA(CODIGO)=TRUE) THEN
        LOCK TABLE CATEGORIA IN ROW EXCLUSIVE MODE;
        UPDATE CATEGORIA
        SET NOMBRE=NOMBRE_C
        WHERE COD_CATEGORIA=CODIGO;
        COMMIT;
        BOOL := 'TRUE';
        MESSAGE := 'LA CATEGORIA CON CÓDIGO: '||CODIGO||' SE HA ACTUALIZADO CORRECTAMENTE';
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'LA CATEGORIA QUE INTENTA ACTUALIZAR NO EXISTE';
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END ACTUALIZAR_CATEGORIA;

CREATE OR REPLACE PROCEDURE AGREGA_CARRITO(
    RUT_U IN USUARIO.RUT%TYPE,
    CODIGO IN SUCURSAL_HERRAMIENTA.COD_HERRAMIENTA%TYPE,
    CODIGO_S IN SUCURSAL_HERRAMIENTA.COD_SUCURSAL%TYPE,
    FECHA_I IN VARCHAR2,
    FECHA_F IN VARCHAR2,
    CANTIDAD_C IN NUMBER,    
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
    MAXIMOSTOCK NUMBER;
    CANTIDAD_CARRO NUMBER;
BEGIN    
    IF(CHECKHERRAMIENTA(CODIGO)=TRUE) THEN
        MAXIMOSTOCK := CHECKSTOCK(CODIGO,CODIGO_S,FECHA_I,FECHA_F);    
        IF(CHECKCARRITO(CODIGO,CODIGO_S,RUT_U)=TRUE) THEN
            IF(CANTIDAD_C>0) THEN                
                CANTIDAD_CARRO := CHECK_CANTIDAD_CARRITO(CODIGO,CODIGO_S,RUT_U); 
                IF (CANTIDAD_CARRO!=-1) THEN
                    IF((CANTIDAD_C + CANTIDAD_CARRO)<=MAXIMOSTOCK) THEN
                        LOCK TABLE CARRITO IN ROW EXCLUSIVE MODE;
                        UPDATE CARRITO
                        SET CANTIDAD = CANTIDAD_CARRO + CANTIDAD_C
                        WHERE COD_HERRAMIENTA = CODIGO
                        AND RUT = RUT_U
                        AND COD_SUCURSAL = CODIGO_S;
                        COMMIT;
                        BOOL := 'TRUE';
                        MESSAGE := 'EL CARRITO SE HA ACTUALIZADO CON ÉXITO';
                    ELSE
                        IF(CANTIDAD_CARRO = MAXIMOSTOCK) THEN
                            BOOL := 'FALSE';
                            MESSAGE := 'YA ALCANZÓ EL MÁXIMO STOCK DE NUESTRA HERRAMIENTA EN EL CARRITO';
                        ELSE
                            LOCK TABLE CARRITO IN ROW EXCLUSIVE MODE;
                            UPDATE CARRITO
                            SET CANTIDAD = MAXIMOSTOCK
                            WHERE COD_HERRAMIENTA = CODIGO
                            AND RUT = RUT_U
                            AND COD_SUCURSAL = CODIGO_S;
                            COMMIT;
                            BOOL := 'TRUE';
                            MESSAGE := 'EL CARRITO SE HA ACTUALIZADO CON ÉXITO';
                        END IF;
                    END IF;
                ELSE
                    BOOL := 'FALSE';
                    MESSAGE := 'LA HERRAMIENTA QUE SELECCIONÓ NO EXISTE EN LA BASE DE DATOS';
                END IF;
            ELSE
                BOOL := 'FALSE';
                MESSAGE := 'LA CANTIDAD DEL PRODUCTO NO PUEDE SER CERO O NEGATIVA';
            END IF;
        ELSE
            IF(CANTIDAD_C>0) THEN
                IF(CANTIDAD_C > MAXIMOSTOCK) THEN
                    BOOL := 'FALSE';
                    MESSAGE := 'LA CANTIDAD DE PRODUCTOS QUE HA SELECCIONADO EXCEDE EL MÁXIMO';
                ELSE
                    LOCK TABLE CARRITO IN ROW EXCLUSIVE MODE;
                    INSERT INTO CARRITO (COD_HERRAMIENTA,RUT,CANTIDAD,COD_SUCURSAL) VALUES (CODIGO,RUT_U,CANTIDAD_C,CODIGO_S);
                    COMMIT;
                    BOOL := 'TRUE';
                    MESSAGE := 'SU CARRITO SE HA ACTUALIZADO CON LOS PRODUCTOS SELECCIONADOS';
                END IF;
            ELSE
                BOOL := 'FALSE';
                MESSAGE := 'LA CANTIDAD DEL PRODUCTO NO PUEDE SER CERO O NEGATIVA';
            END IF;
        END IF;
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'LA HERRAMIENTA QUE SELECCIONÓ NO EXISTE EN LA BASE DE DATOS';
    END IF;
END;

CREATE OR REPLACE PROCEDURE VACIAR_CARRITO(
    RUT_U IN USUARIO.RUT%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
BEGIN
    IF(CHECKUSER(RUT_U)=TRUE) THEN
        LOCK TABLE CARRITO IN ROW EXCLUSIVE MODE;
        DELETE FROM CARRITO WHERE RUT=RUT_U;
        COMMIT;
        BOOL := 'TRUE';
        MESSAGE := 'SE HA VACIADO EL CARRITO EXITOSAMENTE';
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'EL CARRITO NO SE PUEDO VACIAR YA QUE EL USUARIO NO EXISTE';
    END IF;
    EXCEPTION 
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END VACIAR_CARRITO;

CREATE OR REPLACE PROCEDURE BORRAR_HERRAMIENTA_CARRITO(
    RUT_U IN CARRITO.RUT%TYPE,
    CODIGO_H IN CARRITO.COD_HERRAMIENTA%TYPE,
    CODIGO_S IN CARRITO.COD_SUCURSAL%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
BEGIN
    IF(CHECKCARRITO(CODIGO_H,CODIGO_S,RUT_U)=TRUE) THEN
        LOCK TABLE CARRITO IN ROW EXCLUSIVE MODE;
        DELETE FROM CARRITO WHERE COD_HERRAMIENTA = CODIGO_H
        AND COD_SUCURSAL = CODIGO_S
        AND RUT = RUT_U;
        COMMIT;
        BOOL := 'TRUE';
        MESSAGE := 'LA HERRAMIENTA SE HA ELIMINADO CON EXITO';
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'LA HERRAMIENTA NO ESTÁ EN EL CARRITO';
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END BORRAR_HERRAMIENTA_CARRITO;
    
CREATE OR REPLACE PROCEDURE QUITA_CARRITO(
    RUT_U IN USUARIO.RUT%TYPE,
    CODIGO IN HERRAMIENTA.COD_HERRAMIENTA%TYPE,
    CODIGO_S IN SUCURSAL_HERRAMIENTA.COD_SUCURSAL%TYPE,
    CANTIDAD_C IN NUMBER,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
    CANTIDAD_CARRITO NUMBER;
BEGIN
    IF(CANTIDAD_C>0) THEN
        CANTIDAD_CARRITO := CHECK_CANTIDAD_CARRITO(CODIGO,CODIGO_S,RUT_U);
        IF (CANTIDAD_CARRITO!=-1) THEN
            IF(CHECKHERRAMIENTA(CODIGO)=TRUE) THEN
                IF(CHECKCARRITO(CODIGO,CODIGO_S,RUT_U)=TRUE) THEN
                    IF((CANTIDAD_CARRITO-CANTIDAD_C)>=0) THEN
                        LOCK TABLE CARRITO IN ROW EXCLUSIVE MODE;
                        UPDATE CARRITO
                        SET CANTIDAD = CANTIDAD_CARRITO - CANTIDAD_C
                        WHERE COD_HERRAMIENTA = CODIGO
                        AND RUT = RUT_U
                        AND COD_SUCURSAL = CODIGO_S;
                        COMMIT;
                        IF(CHECK_CANTIDAD_CARRITO(CODIGO,CODIGO_S,RUT_U)=0) THEN
                            LOCK TABLE CARRITO IN ROW EXCLUSIVE MODE;
                            DELETE FROM CARRITO WHERE COD_HERRAMIENTA = CODIGO
                            AND RUT = RUT_U
                            AND COD_SUCURSAL = CODIGO_S;
                            COMMIT;
                        END IF;
                        BOOL := 'TRUE';
                        MESSAGE := 'EL CARRITO SE HA ACTUALIZADO CON ÉXITO';
                    ELSE
                        BOOL := 'FALSE';
                        MESSAGE := 'LA CANTIDAD INGRESADA SUPERA A LA CANTIDAD DE PRODUCTOS DEL CARRITO';
                    END IF;
                END IF;
            END IF;
        ELSE
            BOOL := 'FALSE';
            MESSAGE := 'UPS! LA HERRAMIENTA SE ELIMINÓ DEL CARRITO';
        END IF;
    ELSE
        BOOL := 'FALSE';
        MESSAGE := 'LA CANTIDAD DEL PRODUCTO NO PUEDE SER CERO O NEGATIVA';
    END IF;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            BOOL := 'FALSE';
            MESSAGE := 'NO SE PUEDE QUITAR LA HERRAMIENTA YA QUE NO ESTÁ EN EL CARRITO';
            ROLLBACK;
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            ROLLBACK;
END QUITA_CARRITO;


CREATE OR REPLACE PROCEDURE ARRENDAR(
    F_INICIO IN VARCHAR2,
    F_FINAL IN VARCHAR2,
    RUT_U IN ARRIENDO.RUT_U%TYPE,
    COD_S IN SUCURSAL.COD_SUCURSAL%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2,
    CODIGO_ARRIENDO OUT NUMBER)
IS
    FECHAACTUAL EXCEPTION;
    VERIFICADOR NUMBER;
    CONTADOR NUMBER;
    ALMACENAJE NUMBER;
    CODIGO NUMBER;
    CANTIDAD NUMBER;
    SUCURSAL NUMBER;
    TOTAL NUMBER;
    ID_ARRIENDO NUMBER;
    CARRITO_VACIO EXCEPTION;
    CURSOR VERIFICA_PRODUCTOS IS SELECT COD_HERRAMIENTA,CANTIDAD,COD_SUCURSAL,TOTAL FROM CARRITO 
    WHERE RUT = RUT_U AND COD_SUCURSAL = COD_S;
BEGIN
    IF (CHECK_FECHA_FINAL(TO_DATE(F_INICIO,'DD/MM/YYYY'),TO_DATE(F_FINAL,'DD/MM/YYYY'))) = TRUE THEN
        SELECT COUNT(*) INTO VERIFICADOR FROM CARRITO WHERE RUT = RUT_U AND COD_SUCURSAL = COD_S;   
        CONTADOR := 0;
        OPEN VERIFICA_PRODUCTOS;
        LOOP            
            FETCH VERIFICA_PRODUCTOS INTO CODIGO, CANTIDAD, SUCURSAL, TOTAL;
                IF VERIFICA_PRODUCTOS%ROWCOUNT=0 THEN
                    RAISE CARRITO_VACIO;
                ELSE                
                    EXIT WHEN VERIFICA_PRODUCTOS%NOTFOUND;
                    ALMACENAJE := VERIFICAR_PRODUCTO_VENTA(TO_DATE(F_INICIO,'DD/MM/YYYY'),TO_DATE(F_FINAL,'DD/MM/YYYY'),SUCURSAL,CODIGO);  
                    IF CANTIDAD <= ALMACENAJE THEN
                        CONTADOR := CONTADOR + 1;
                    END IF;
                END IF;
        END LOOP;
        CLOSE VERIFICA_PRODUCTOS;
        IF CONTADOR = VERIFICADOR THEN
            ID_ARRIENDO := ARRIENDO_AI.NEXTVAL;
            LOCK TABLE ARRIENDO IN ROW EXCLUSIVE MODE;
            INSERT INTO ARRIENDO VALUES (ID_ARRIENDO,TO_DATE(F_INICIO,'DD/MM/YYYY'),TO_DATE(F_FINAL,'DD/MM/YYYY'),0,RUT_U,COD_S,'ACTIVO',SYSDATE);
            LOCK TABLE DETALLE IN ROW EXCLUSIVE MODE;
            OPEN VERIFICA_PRODUCTOS;
            LOOP
                FETCH VERIFICA_PRODUCTOS INTO CODIGO, CANTIDAD, SUCURSAL, TOTAL;
                    EXIT WHEN VERIFICA_PRODUCTOS%NOTFOUND;
                    INSERT INTO DETALLE VALUES (CODIGO,CANTIDAD,TOTAL,ID_ARRIENDO);
            END LOOP;
            CLOSE VERIFICA_PRODUCTOS;
            COMMIT;
            IF VACIAR_CARRO(RUT_U) = TRUE THEN
                BOOL := 'TRUE';
                MESSAGE := 'EL ARRIENDO SE HA REALIZADO EXITOSAMENTE';
                CODIGO_ARRIENDO := ID_ARRIENDO;
            ELSE
                BOOL := 'TRUE';
                MESSAGE := 'EL ARRIENDO SE HA REALIZADO EXITOSAMENTE, PERO FALLÓ LA LIMPIEZA DEL CARRO DE COMPRAS';
                CODIGO_ARRIENDO := ID_ARRIENDO;
            END IF;
        ELSE
            BOOL := 'FALSE';
            MESSAGE := 'UNA O MÁS HERRAMIENTAS DE SU CARRITO YA HAN SIDO ARRENDADAS POR OTRO USUARIO. PRUEBE LIMPIANDO EL CARRO DE ARRIENDOS Y SELECCIONE NUEVAMENTE LAS HERRAMIENTAS';
            CODIGO_ARRIENDO := -1;
        END IF;
        
    ELSE
        RAISE FECHAACTUAL;
    END IF;
    EXCEPTION
        WHEN CARRITO_VACIO THEN
            BOOL := 'FALSE';
            MESSAGE := 'EL CARRITO DE COMPRAS ESTÁ VACÍO';
            CODIGO_ARRIENDO := -1;
            ROLLBACK;
        WHEN NO_DATA_FOUND THEN
            BOOL := 'FALSE';
            MESSAGE := 'NO HAY PRODUCTOS EN EL CARRITO';
            CODIGO_ARRIENDO := -1;
            ROLLBACK;
        WHEN FECHAACTUAL THEN
            BOOL := 'FALSE';
            MESSAGE := 'LA FECHA FINAL DEBE SER A LO MENOS EL DÍA SIGUIENTE DE LA FECHA INICIAL';
            CODIGO_ARRIENDO := -1;
            ROLLBACK;
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := SQLERRM;
            CODIGO_ARRIENDO := -1;
            ROLLBACK;
END;

CREATE OR REPLACE PROCEDURE INICIO_SESION(
    RUT_U IN USUARIO.RUT%TYPE,
    PASS_U IN USUARIO.PASS%TYPE,
    BOOL OUT VARCHAR2,
    MESSAGE OUT VARCHAR2)
IS
BEGIN
    IF VALIDACION(RUT_U)=TRUE THEN
        IF CHECKUSER(RUT_U)=TRUE THEN
            IF VALIDAR_LOGIN(RUT_U,PASS_U)=TRUE THEN
                BOOL := 'TRUE';
                MESSAGE := 'INICIO DE SESIÓN AUTORIZADO';
            ELSE
                BOOL := 'FALSE';
                MESSAGE := 'LOS DATOS INGRESADOS SON INCORRECTOS';
            END IF;
        ELSE 
            BOOL := 'FALSE';
            MESSAGE := 'EL USUARIO CON RUT: '||RUT_U||' NO EXISTE EN EL SISTEMA';
        END IF;
    ELSE        
        BOOL := 'FALSE';
        MESSAGE := 'EL RUT INGRESADO NO ES VÁLIDO';
    END IF;
    EXCEPTION
        WHEN OTHERS THEN
            BOOL := 'FALSE';
            MESSAGE := 'HA OCURRIDO UN ERROR INTERNO';
END;
